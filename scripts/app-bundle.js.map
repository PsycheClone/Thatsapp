{"version":3,"sources":["addContact.js","app.js","authorize.js","chat.js","environment.js","httpService.js","login.js","main.js","message.js","test.js","user.js","resources/index.js"],"names":["AddContact","defaultBindingMode","twoWay","httpService","controller","getContacts","then","users","JSON","parse","response","console","log","activate","user","add","user_id","addContact","catch","AppComponent","authStep","configureRouter","config","router","addAuthorizeStep","title","map","route","name","moduleId","settings","auth","AuthorizeStep","authService","run","navigationInstruction","next","getAllInstructions","some","i","isLoggedIn","authenticated","cancel","ChatComponent","dialogService","message","messages","selectedContact","attached","decode","authentication","accessToken","self","client","WebSocket","websocketUrl","onopen","send","stringify","onmessage","incoming","parsed","data","clientNames","push","otheruser","nickname","corresponder","timestamp","error","getContact","sendMessage","createMessage","open","viewModel","model","lock","whenClosed","wasCancelled","output","logout","debug","testing","backendUrl","HttpService","configure","x","withBaseUrl","register","password","firstName","lastName","email","success","post","get","userId","contactId","Login","taskQueue","login","loginNickname","loginPassword","setResponseObject","json","queueMicroTask","$","fadeTo","postRegister","registerNickname","registerPassword","goToRegister","Promise","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","plugin","registerEndpoint","baseConfig","endpoint","configureEndpoints","logoutRedirect","refreshTokenUrl","useRefreshToken","developmentLogging","start","setRoot","MessageCustomElement","scrollTop","scrollHeight","isError","TestComponent","params","id","UserCustomElement","selectContact"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import {HttpService} from \"./httpService\";\nimport {inject} from 'aurelia-framework';\nimport {DialogController} from 'aurelia-dialog';\nimport {bindable, bindingMode} from 'aurelia-framework';\n\n@inject(HttpService, DialogController)\nexport class AddContact {\n  @bindable({ defaultBindingMode: bindingMode.twoWay }) user;\n\n  constructor(httpService, controller) {\n    this.httpService = httpService;\n    this.controller = controller;\n    this.httpService.getContacts()\n      .then(response => {\n        this.users = JSON.parse(response.response);\n        console.log(this.users);\n      })\n  }\n\n  activate(user) {\n    this.user = user;\n  }\n\n  add(user) {\n    console.log(this.user.user_id, user.user_id);\n    this.httpService.addContact(this.user.user_id, user.user_id)\n      .then(response => {console.log(response)})\n      .catch(response => {console.log(response)});\n  }\n}\n","import { AuthorizeStep } from './authorize';\nimport {inject} from 'aurelia-framework';\n\n@inject(AuthorizeStep)\nexport class AppComponent {\n\n  constructor(authStep) {\n    this.authStep  = authStep;\n  }\n\n  configureRouter(config, router) {\n    config.addAuthorizeStep(this.authStep);\n    config.title = 'Aurelia';\n    config.map([\n      { route: ['', 'home'],        name: 'home',            moduleId: 'chat',  settings: { auth: true }  },\n      { route: 'register',          name: 'register',        moduleId: 'register' },\n      { route: 'login',             name: 'login',           moduleId: 'login' }\n    ]);\n  }\n}\n","import { RedirectToRoute } from 'aurelia-router';\nimport {AuthService} from 'aurelia-authentication';\nimport {inject, computedFrom} from 'aurelia-framework';\n\n@inject(AuthService)\nexport class AuthorizeStep {\n\n  constructor(authService) {\n    this.authService   = authService;\n  };\n\n  run(navigationInstruction, next) {\n    if (navigationInstruction.getAllInstructions().some(i => i.config.settings.auth)) {\n      var isLoggedIn = this.authService.authenticated;\n      if (!isLoggedIn) {\n        return next.cancel(new RedirectToRoute('login'));\n      }\n    }\n\n    return next();\n  }\n}\n","import {AuthService} from 'aurelia-authentication';\nimport {DialogService} from 'aurelia-dialog';\nimport {inject} from 'aurelia-framework';\nimport {JwtDecode} from 'aurelia-plugins-jwt-decode';\nimport {HttpService} from './httpService';\nimport {AddContact} from './addContact';\nimport environment from './environment'\n\n@inject(AuthService, DialogService, HttpService)\nexport class ChatComponent {\n  message = '';\n  messages = [];\n  users = [];\n  name = '';\n  selectedContact = '';\n  client;\n\n  constructor(authService, dialogService, httpService) {\n    this.authService = authService;\n    this.dialogService = dialogService;\n    this.httpService = httpService;\n  }\n\n  attached() {\n    this.user = JwtDecode.decode(this.authService.authentication.accessToken);\n    let self = this;\n    this.client = new WebSocket(environment.websocketUrl);\n    this.client.onopen = function() {\n      self.client.send(JSON.stringify({\"connect\": self.authService.authentication.accessToken}));\n    }\n    this.client.onmessage = function incoming(message) {\n      let parsed = JSON.parse(message.data);\n      if(parsed.clientNames) {\n        console.log(parsed);\n        // self.users = parsed.clientNames;\n      } else {\n        console.log(parsed);\n        self.messages.push({\n          otheruser: function() { return self.name === parsed.nickname }(),\n          corresponder: parsed.nickname,\n          message: parsed.message,\n          timestamp: parsed.timestamp,\n          error: parsed.error\n        });\n      }\n    }\n\n    this.httpService.getContact(this.user.user_id)\n      .then(response => {\n        self.users = JSON.parse(response.response);\n        console.log(self.users);\n      })\n  }\n\n  sendMessage() {\n    this.client.send(this.createMessage());\n    this.message = '';\n  }\n\n  createMessage() {\n    return JSON.stringify({\n      \"sender\": this.user.nickname,\n      \"addressee\": this.selectedContact.nickname,\n      \"message\": this.message\n    });\n  }\n\n  addContact() {\n    this.dialogService.open({ viewModel: AddContact, model: this.user, lock: false }).whenClosed(response => {\n      if (!response.wasCancelled) {\n        console.log('good');\n      } else {\n        console.log('bad');\n      }\n      console.log(response.output);\n    });\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n}\n","export default {\n  debug: true,\n  testing: true,\n  backendUrl: \"http://192.168.0.120:3000\",\n  websocketUrl: \"ws://192.168.0.120:8001\"\n};\n","import {HttpClient} from 'aurelia-http-client';\nimport environment from './environment';\n\nexport class HttpService {\n  constructor() {\n    this.client = new HttpClient()\n      .configure(x => {\n        x.withBaseUrl(environment.backendUrl);\n      });\n  }\n\n  register(nickname, password, firstName, lastName, email, success, error) {\n    return this.client.post('auth/register', {\n      nickname: nickname,\n      password: password,\n      firstName: firstName,\n      lastName: lastName,\n      email: email\n    });\n  }\n\n  getContacts() {\n    return this.client.get('get/contact/');\n  }\n\n  getContact(userId) {\n    return this.client.get('get/contact/' + userId);\n  }\n\n  addContact(userId, contactId) {\n  return this.client.post('add/contact/',\n      {\n        userId: userId,\n        contactId: contactId\n      });\n  }\n}\n","import {AuthService} from 'aurelia-authentication';\nimport {Router} from 'aurelia-router';\nimport {inject, computedFrom} from 'aurelia-framework';\nimport {TaskQueue} from 'aurelia-framework';\nimport {HttpService} from \"./httpService\";\n\n@inject(AuthService, Router, TaskQueue, HttpService)\nexport class Login {\n  constructor(authService, router, taskQueue, httpService) {\n    this.register = false;\n    this.authService   = authService;\n    this.router = router;\n    this.taskQueue = taskQueue;\n    this.httpService = httpService;\n  }\n\n  // make a getter to get the authentication status.\n  // use computedFrom to avoid dirty checking\n  @computedFrom('authService.authenticated')\n  get authenticated() {\n    return this.authService.authenticated;\n  }\n\n  // use authService.login(credentialsObject) to login to your auth server\n  login() {\n    let self = this;\n    return this.authService.login({\n      nickname: this.loginNickname,\n      password: this.loginPassword\n    }).then(response => {\n      console.log(response);\n      self.authService.setResponseObject(response);\n      console.log(self.authService.authenticated);\n    }).catch(response => response.json())\n      .then(error => {\n      this.error = error.error;\n      this.taskQueue.queueMicroTask(() => {\n        $('#loginfailed').fadeTo(\"slow\", 1);\n      });\n    });\n  }\n\n  postRegister() {\n    this.loginNickname = this.registerNickname;\n    this.loginPassword = this.registerPassword;\n    this.httpService.register(\n      this.registerNickname,\n      this.registerPassword,\n      this.firstName,\n      this.lastName,\n      this.email)\n      .then(response => {\n      console.log(response);\n      this.login();\n    }).catch(response => {\n      this.error = JSON.parse(response.response).error;\n      this.taskQueue.queueMicroTask(() => {\n        $('#registerfailed').fadeTo(\"slow\", 1);\n      });\n    })\n  }\n\n  goToRegister() {\n    this.register = true;\n  }\n}\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources')\n    .plugin('aurelia-api', configure => {\n      configure\n        .registerEndpoint('auth', environment.backendUrl)\n        .registerEndpoint('login', '/login')\n        .registerEndpoint('register', '/register')\n        .registerEndpoint('chat', '/chat');\n    })\n    .plugin('aurelia-dialog')\n    .plugin('aurelia-authentication', baseConfig => {\n      baseConfig.configure({\n        endpoint: 'auth',                   // '' for the default endpoint\n        configureEndpoints: ['auth', 'login', 'register', 'chat'], // '' for the default endpoint});\n        // loginRoute: '/login',\n        logoutRedirect: '/',\n        refreshTokenUrl: null,\n        useRefreshToken: false,\n      });\n    });\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {inject} from 'aurelia-framework';\nimport {bindable, bindingMode} from 'aurelia-framework';\nimport {TaskQueue} from 'aurelia-framework';\n\n@inject(TaskQueue)\nexport class MessageCustomElement {\n  @bindable({ defaultBindingMode: bindingMode.twoWay }) message;\n\n  constructor(taskQueue) {\n    this.taskQueue = taskQueue;\n  }\n\n  attached() {\n    console.log(this.message.error !== \"none\");\n    this.taskQueue.queueMicroTask(() => {\n      $('#chat-container').scrollTop($('#chat-container')[0].scrollHeight)\n    });\n  }\n\n  isError() {\n    return this.message.error !== \"none\";\n  }\n}\n","export class TestComponent {\n  activate(params) {\n    this.id = params.id\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport {bindable, bindingMode} from 'aurelia-framework';\nimport {AuthService} from 'aurelia-authentication';\nimport { Router } from 'aurelia-router';\n\n@inject(Router, AuthService)\nexport class UserCustomElement {\n  @bindable({ defaultBindingMode: bindingMode.twoWay }) user;\n  @bindable({ defaultBindingMode: bindingMode.twoWay }) selectedContact;\n\n  constructor(router, authService) {\n    this.router = router;\n    this.authService = authService;\n  }\n\n  selectContact() {\n    this.selectedContact = this.user;\n    console.log(this.selectedContact);\n  }\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":"../src"}