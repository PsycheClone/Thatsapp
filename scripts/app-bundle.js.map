{"version":3,"sources":["app.js","authorize.js","chat.js","environment.js","login.js","main.js","message.js","register.js","test.js","user.js","resources/index.js"],"names":["AppComponent","authStep","configureRouter","config","router","addAuthorizeStep","title","map","route","name","moduleId","settings","auth","AuthorizeStep","authService","run","navigationInstruction","next","getAllInstructions","some","i","isLoggedIn","authenticated","cancel","ChatComponent","message","messages","users","nameSet","attached","user","decode","authentication","accessToken","self","client","WebSocket","onopen","send","createNewUser","onmessage","incoming","parsed","JSON","parse","data","clientNames","console","log","push","otheruser","corresponder","sendMessage","createMessage","stringify","nickname","logout","debug","testing","Login","login","username","password","then","response","setResponseObject","register","navigateToRoute","authenticate","provider","configure","Promise","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","plugin","registerEndpoint","baseConfig","endpoint","configureEndpoints","loginRoute","signupUrl","logoutRedirect","refreshTokenUrl","useRefreshToken","developmentLogging","start","setRoot","MessageCustomElement","defaultBindingMode","twoWay","taskQueue","queueMicroTask","$","scrollTop","scrollHeight","Register","firstName","lastName","email","x","withBaseUrl","post","TestComponent","activate","params","id","UserCustomElement","status"],"mappings":"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","file":"app-bundle.js","sourcesContent":["import { AuthorizeStep } from './authorize';\nimport {inject} from 'aurelia-framework';\n\n@inject(AuthorizeStep)\nexport class AppComponent {\n\n  constructor(authStep) {\n    this.authStep  = authStep;\n  }\n\n  configureRouter(config, router) {\n    config.addAuthorizeStep(this.authStep);\n    config.title = 'Aurelia';\n    config.map([\n      { route: ['', 'home'],        name: 'home',            moduleId: 'chat',  settings: { auth: true }  },\n      { route: 'register',          name: 'register',        moduleId: 'register' },\n      { route: 'login',             name: 'login',           moduleId: 'login' }\n    ]);\n  }\n}\n","import { RedirectToRoute } from 'aurelia-router';\nimport {AuthService} from 'aurelia-authentication';\nimport {inject, computedFrom} from 'aurelia-framework';\n\n@inject(AuthService)\nexport class AuthorizeStep {\n\n  constructor(authService) {\n    this.authService   = authService;\n  };\n\n  run(navigationInstruction, next) {\n    if (navigationInstruction.getAllInstructions().some(i => i.config.settings.auth)) {\n      var isLoggedIn = this.authService.authenticated;\n      if (!isLoggedIn) {\n        return next.cancel(new RedirectToRoute('login'));\n      }\n    }\n\n    return next();\n  }\n}\n","import {AuthService} from 'aurelia-authentication';\nimport {inject} from 'aurelia-framework';\nimport {JwtDecode} from 'aurelia-plugins-jwt-decode';\n\n@inject(AuthService)\nexport class ChatComponent {\n  message = '';\n  messages = [];\n  users = [];\n  name = '';\n  nameSet = true;\n  client;\n\n  constructor(authService) {\n    this.authService = authService;\n  }\n\n  attached() {\n    this.user = JwtDecode.decode(this.authService.authentication.accessToken);\n    var self = this;\n    this.client = new WebSocket('ws://localhost:8001')\n    this.client.onopen = function() {\n      self.client.send(self.createNewUser());\n    }\n    this.client.onmessage = function incoming(message) {\n      let parsed = JSON.parse(message.data);\n      if(parsed.clientNames) {\n        console.log(parsed);\n        self.users = parsed.clientNames;\n      } else {\n        self.messages.push({ otheruser: function() { return self.name === parsed.name }(), corresponder: parsed.name, message: parsed.message });\n      }\n    }\n  }\n\n  sendMessage() {\n    this.client.send(this.createMessage())\n    this.message = '';\n  }\n\n  createNewUser() {\n    return JSON.stringify({\n      \"newUser\": this.user.nickname\n    });\n  }\n\n  createMessage() {\n    return JSON.stringify({\n      \"name\": this.user.nickname,\n      \"message\": this.message\n    });\n  }\n\n  logout() {\n    this.authService.logout();\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import {AuthService} from 'aurelia-authentication';\nimport {Router} from 'aurelia-router';\nimport {inject, computedFrom} from 'aurelia-framework';\nimport {JwtDecode} from 'aurelia-plugins-jwt-decode';\n\n@inject(AuthService, Router)\nexport class Login {\n  constructor(authService, router) {\n    this.authService   = authService;\n    this.router = router;\n  };\n\n  // make a getter to get the authentication status.\n  // use computedFrom to avoid dirty checking\n  @computedFrom('authService.authenticated')\n  get authenticated() {\n    return this.authService.authenticated;\n  }\n\n  // use authService.login(credentialsObject) to login to your auth server\n  login(username, password) {\n    let self = this;\n    return this.authService.login({\n      nickname: this.nickname,\n      password: this.password\n    }).then(function(response) {\n      console.log(response);\n      self.authService.setResponseObject(response);\n      console.log(self.authService.authenticated);\n    });\n  };\n\n  register() {\n    this.router.navigateToRoute('register');\n  }\n\n  // use authenticate(providerName) to get third-party authentication\n  authenticate(name) {\n    return this.authService.authenticate(name)\n      .then(response => {\n        this.provider[name] = true;\n      });\n  }\n}\n","import environment from './environment';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources')\n\n    .plugin('aurelia-api', configure => {\n      configure\n        .registerEndpoint('auth', 'http://localhost:3000')\n        .registerEndpoint('login', '/login')\n        .registerEndpoint('register', '/register')\n        .registerEndpoint('chat', '/chat');\n    })\n\n  .plugin('aurelia-authentication', baseConfig => {\n    baseConfig.configure({\n      endpoint: 'auth',                   // '' for the default endpoint\n      configureEndpoints: ['auth', 'login', 'register', 'chat'], // '' for the default endpoint});\n      loginRoute: 'login',\n      signupUrl: 'register',\n      logoutRedirect: 'login',\n      refreshTokenUrl: null,\n      useRefreshToken: false,\n    });\n  });\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {inject} from 'aurelia-framework';\nimport {bindable, bindingMode} from 'aurelia-framework';\nimport {TaskQueue} from 'aurelia-framework';\n\n@inject(TaskQueue)\nexport class MessageCustomElement {\n  @bindable({ defaultBindingMode: bindingMode.twoWay }) message;\n\n  constructor(taskQueue) {\n    this.taskQueue = taskQueue;\n  }\n\n  attached() {\n    this.taskQueue.queueMicroTask(() => {\n      $('#chat-container').scrollTop($('#chat-container')[0].scrollHeight)\n    });\n  }\n}\n","import {HttpClient} from 'aurelia-http-client';\n\nexport class Register {\n\n  nickname = \"\";\n  firstName = \"\";\n  password = \"\";\n  lastName = \"\";\n  email = \"\";\n\n  constructor() {\n    this.client = new HttpClient()\n      .configure(x => {\n        x.withBaseUrl('http://localhost:3000');\n      });\n  }\n\n  register() {\n    this.client.post('auth/register', {\n      nickname: this.nickname,\n      password: this.password,\n      firstName: this.firstName,\n      lastName: this.lastName,\n      email: this.email\n    })\n  }\n\n}\n","export class TestComponent {\n  activate(params) {\n    this.id = params.id\n  }\n}\n","import {inject} from 'aurelia-framework';\nimport {bindable, bindingMode} from 'aurelia-framework';\nimport {AuthService} from 'aurelia-authentication';\nimport { Router } from 'aurelia-router';\n\n@inject(Router, AuthService)\nexport class UserCustomElement {\n  @bindable({ defaultBindingMode: bindingMode.twoWay }) user;\n\n  constructor(router, authService) {\n    this.router = router;\n    this.status = \"connected\"\n    this.authService = authService;\n  }\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":"../src"}